// заметил что в репозитории задания есть конфиг на вагрант на 3 виртуалки с разными адресами, на них пробую командочки

1)Проверьте список доступных сетевых интерфейсов на вашем компьютере. Какие команды есть для этого в Linux и в Windows?

Windows - ipconfig -all

vagrant@netology3:~$ sudo apt install net-tools

Linux - ifconfig

vagrant@netology3:~$ ifconfig -a
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
        inet6 fe80::a00:27ff:fe73:60cf  prefixlen 64  scopeid 0x20<link>
        ether 08:00:27:73:60:cf  txqueuelen 1000  (Ethernet)
        RX packets 4385  bytes 4396988 (4.3 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 2032  bytes 223928 (223.9 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.28.128.90  netmask 255.255.255.0  broadcast 0.0.0.0
        inet6 fe80::a00:27ff:fe7a:e28f  prefixlen 64  scopeid 0x20<link>
        ether 08:00:27:7a:e2:8f  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 11  bytes 866 (866.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 42  bytes 3994 (3.9 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 42  bytes 3994 (3.9 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

vagrant@netology3:~$ ip -c a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 08:00:27:73:60:cf brd ff:ff:ff:ff:ff:ff
    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic eth0
       valid_lft 86055sec preferred_lft 86055sec
    inet6 fe80::a00:27ff:fe73:60cf/64 scope link
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 08:00:27:7a:e2:8f brd ff:ff:ff:ff:ff:ff
    inet 172.28.128.90/24 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fe7a:e28f/64 scope link
       valid_lft forever preferred_lft forever




2)Какой протокол используется для распознавания соседа по сетевому интерфейсу?
LLDP – протокол для обмена информацией между соседними устройствами, позволяет определить к какому порту коммутатора подключен сервер.

Какой пакет и команды есть в Linux для этого?
// потребовавалось еще обновить ОС
vagrant@netology3:~$ sudo apt-get update
vagrant@netology3:~$ sudo apt install lldpd
vagrant@netology3:~$ sudo systemctl enable lldpd && systemctl start lldpd
Synchronizing state of lldpd.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable lldpd
==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===
Authentication is required to start 'lldpd.service'.
Authenticating as: vagrant,,, (vagrant)
Password:
==== AUTHENTICATION COMPLETE ===

vagrant@netology3:~$ sudo lldpctl
vagrant@netology3:~$ sudo lldpctl
-------------------------------------------------------------------------------
LLDP neighbors:
-------------------------------------------------------------------------------
Interface:    eth1, via: LLDP, RID: 1, Time: 0 day, 00:03:57
  Chassis:
    ChassisID:    mac 08:00:27:73:60:cf
    SysName:      netology1 // видим 1 машину
    SysDescr:     Ubuntu 20.04.2 LTS Linux 5.4.0-80-generic #90-Ubuntu SMP Fri Jul 9 22:49:44 UTC 2021 x86_64
    MgmtIP:       10.0.2.15
    MgmtIP:       fe80::a00:27ff:fe73:60cf
    Capability:   Bridge, off
    Capability:   Router, off
    Capability:   Wlan, off
    Capability:   Station, on
  Port:
    PortID:       mac 08:00:27:72:32:15
    PortDescr:    eth1
    TTL:          120
    PMD autoneg:  supported: yes, enabled: yes
      Adv:          10Base-T, HD: yes, FD: yes
      Adv:          100Base-TX, HD: yes, FD: yes
      Adv:          1000Base-T, HD: no, FD: yes
      MAU oper type: 1000BaseTFD - Four-pair Category 5 UTP, full duplex mode
-------------------------------------------------------------------------------
Interface:    eth1, via: LLDP, RID: 1, Time: 0 day, 00:01:13
  Chassis:
    ChassisID:    mac 08:00:27:73:60:cf
    SysName:      netology1 // видим 1 машину? но хз почему, я ожидал 2ую)
    SysDescr:     Ubuntu 20.04.2 LTS Linux 5.4.0-80-generic #90-Ubuntu SMP Fri Jul 9 22:49:44 UTC 2021 x86_64
    MgmtIP:       10.0.2.15
    MgmtIP:       fe80::a00:27ff:fe73:60cf
    Capability:   Bridge, off
    Capability:   Router, off
    Capability:   Wlan, off
    Capability:   Station, on
  Port:
    PortID:       mac 08:00:27:e9:5d:95
    PortDescr:    eth1
    TTL:          120
    PMD autoneg:  supported: yes, enabled: yes
      Adv:          10Base-T, HD: yes, FD: yes
      Adv:          100Base-TX, HD: yes, FD: yes
      Adv:          1000Base-T, HD: no, FD: yes
      MAU oper type: 1000BaseTFD - Four-pair Category 5 UTP, full duplex mode
-------------------------------------------------------------------------------






3)Какая технология используется для разделения L2 коммутатора на несколько виртуальных сетей?
VLAN (Virtual Local Area Network) — группа устройств, имеющих возможность взаимодействовать между собой напрямую на канальном уровне, хотя физически при этом они могут быть подключены к разным сетевым коммутаторам.

Какой пакет и команды есть в Linux для этого?

vagrant@netology3:~$ sudo apt install vlan //ubuntu

vagrant@netology3:~$ sudo vim /etc/network/interfaces //добавил в двух машинках

source-directory /etc/network/interfaces.d
auto eth1.1400
iface eth1.1400 inet static
        address 192.168.1.1 // 192.168.1.2
        netmask 255.255.255.0
        vlan_raw_device eth1

vagrant@vagrant:~$ systemctl reboot

vagrant@vagrant:~$ ip -c a
4: eth1.1400@eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 08:00:27:7a:e2:8f brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.1/24 brd 192.168.1.255 scope global eth1.1400
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fe7a:e28f/64 scope link
       valid_lft forever preferred_lft forever
vagrant@vagrant:~$ ping 192.168.1.1
PING 192.168.1.1 (192.168.1.1) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=0.019 ms
64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.027 ms
64 bytes from 192.168.1.1: icmp_seq=3 ttl=64 time=0.026 ms
64 bytes from 192.168.1.1: icmp_seq=4 ttl=64 time=0.025 ms
^C
--- 192.168.1.1 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3052ms
rtt min/avg/max/mdev = 0.019/0.024/0.027/0.003 ms
vagrant@vagrant:~$ ping 192.168.1.2
PING 192.168.1.2 (192.168.1.2) 56(84) bytes of data.
64 bytes from 192.168.1.2: icmp_seq=1 ttl=64 time=0.571 ms
64 bytes from 192.168.1.2: icmp_seq=2 ttl=64 time=0.268 ms
64 bytes from 192.168.1.2: icmp_seq=3 ttl=64 time=0.268 ms
^C
--- 192.168.1.2 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2072ms
rtt min/avg/max/mdev = 0.268/0.369/0.571/0.142 ms

------------------------------------------------------------------------------------------
vagrant@vagrant:~$ ip -c a
4: eth1.1400@eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 08:00:27:72:32:15 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.2/24 brd 192.168.1.255 scope global eth1.1400
       valid_lft forever preferred_lft forever
    inet6 fe80::a00:27ff:fe72:3215/64 scope link
       valid_lft forever preferred_lft forever
vagrant@vagrant:~$ ping 192.168.1.1
PING 192.168.1.1 (192.168.1.1) 56(84) bytes of data.
64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=0.230 ms
64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.360 ms
64 bytes from 192.168.1.1: icmp_seq=3 ttl=64 time=0.277 ms
^C
--- 192.168.1.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2051ms
rtt min/avg/max/mdev = 0.230/0.289/0.360/0.053 ms
vagrant@vagrant:~$ ping 192.168.1.2
PING 192.168.1.2 (192.168.1.2) 56(84) bytes of data.
64 bytes from 192.168.1.2: icmp_seq=1 ttl=64 time=0.017 ms
64 bytes from 192.168.1.2: icmp_seq=2 ttl=64 time=0.032 ms
64 bytes from 192.168.1.2: icmp_seq=3 ttl=64 time=0.027 ms
^C
--- 192.168.1.2 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2040ms
rtt min/avg/max/mdev = 0.017/0.025/0.032/0.006 ms


linux: http://xgu.ru/wiki/VLAN_в_Linux
Для просмотра информации о влан-интерфейсе в команде ip link show необходимо задать ключ -d[etails].
$ip -details link show dev mgmt

Приведите пример конфига.
т.к это виртуальные порты, может быть конфликт одинаковых MAC




4)Какие типы агрегации интерфейсов есть в Linux?

Mode-0(balance-rr) – Данный режим используется по умолчанию. Balance-rr обеспечивается балансировку нагрузки и отказоустойчивость.
В данном режиме сетевые пакеты отправляются “по кругу”, от первого интерфейса к последнему.
Если выходят из строя интерфейсы, пакеты отправляются на остальные оставшиеся.
Дополнительной настройки коммутатора не требуется при нахождении портов в одном коммутаторе.
При разностных коммутаторах требуется дополнительная настройка.

Mode-1(active-backup) – Один из интерфейсов работает в активном режиме, остальные в ожидающем.
При обнаружении проблемы на активном интерфейсе производится переключение на ожидающий интерфейс.
Не требуется поддержки от коммутатора.

Mode-2(balance-xor) – Передача пакетов распределяется по типу входящего и исходящего трафика по формуле ((MAC src) XOR (MAC dest)) % число интерфейсов.
Режим дает балансировку нагрузки и отказоустойчивость. Не требуется дополнительной настройки коммутатора/коммутаторов.

Mode-3(broadcast) – Происходит передача во все объединенные интерфейсы, тем самым обеспечивая отказоустойчивость.
Рекомендуется только для использования MULTICAST трафика.

Mode-4(802.3ad) – динамическое объединение одинаковых портов.
В данном режиме можно значительно увеличить пропускную способность входящего так и исходящего трафика.
Для данного режима необходима поддержка и настройка коммутатора/коммутаторов.

Mode-5(balance-tlb) – Адаптивная балансировки нагрузки трафика.
Входящий трафик получается только активным интерфейсом, исходящий распределяется в зависимости от текущей загрузки канала каждого интерфейса.
Не требуется специальной поддержки и настройки коммутатора/коммутаторов.

Mode-6(balance-alb) – Адаптивная балансировка нагрузки.
Отличается более совершенным алгоритмом балансировки нагрузки чем Mode-5).
Обеспечивается балансировку нагрузки как исходящего так и входящего трафика.
Не требуется специальной поддержки и настройки коммутатора/коммутаторов.

Descriptions of balancing algorithm modes
The balancing algorithm is set with the xmit_hash_policy option.

Какие опции есть для балансировки нагрузки?
Possible values are:
layer2 Uses XOR of hardware MAC addresses to generate the hash. This algorithm will place all traffic to a particular network peer on the same slave.
layer2+3 Uses XOR of hardware MAC addresses and IP addresses to generate the hash. This algorithm will place all traffic to a particular network peer on the same slave.
layer3+4 This policy uses upper layer protocol information, when available, to generate the hash. This allows for traffic to a particular network peer to span multiple slaves, although a single connection will not span multiple slaves.
encap2+3 This policy uses the same formula as layer2+3 but it relies on skb_flow_dissect to obtain the header fields which might result in the use of inner headers if an encapsulation protocol is used.
encap3+4 This policy uses the same formula as layer3+4 but it relies on skb_flow_dissect to obtain the header fields which might result in the use of inner headers if an encapsulation protocol is used.
The default value is layer2. This option was added in bonding version 2.6.3. In earlier versions of bonding, this parameter does not exist, and the layer2 policy is the only policy. The layer2+3 value was added for bonding version 3.2.2.

На лекции смотрели на LAG
Агрегирование каналов (агрегация каналов, англ. link aggregation) — технология, которая позволяет объединить несколько физических каналов в один логический.
Такое объединение позволяет увеличивать пропускную способность и надежность канала.
Агрегирование каналов может быть настроено между двумя коммутаторами, коммутатором и маршрутизатором, между коммутатором и хостом.

vagrant@vagrant:~$ sudo apt install ifenslave
vagrant@vagrant:~$ sudo modprobe bonding
vagrant@vagrant:~$ sudo vim /etc/network/interfaces

auto eth0
iface eth0 inet manual
    bond-master bond0
    bond-primary eth0

auto eth1
iface eth1 inet manual
    bond-master bond0

auto bond0
iface bond0 inet static
    address 192.168.1.10
    gateway 192.168.1.1
    netmask 255.255.255.0
    bond-mode active-backup
    bond-miimon 100
    bond-slaves none

vagrant@vagrant:~$ sudo systemctl reboot
// по ssh не смог подрубится, т.к eth0 я объеденил) но можно через VB посмотреть

4: bond0: <BROADCAST,MULTICAST,MASTER,UP,LOMER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 08:00:27:73:60:cf brd ff:ff:ff:ff:ff
    inet 192.168.1.10/24 brd 192.168.1.255 scope global bond0
        valid_lft forever preferred lft forever
    inet6 fe80: :a00:27ff:fe73:60cf/64 scope link
        valid_lft forever preferred_lft forever

Приведите пример конфига.
Ну вот у меня например, что я не смог законнектиться, а если подумать, то банально разные bond используют один и тот же линк, думаю будут проблемы.

5)Сколько IP адресов в сети с маской /29 ?

Маска подсети	Префикс, бит	Количество адресов
255.255.255.248	     /29              	8

Сколько /29 подсетей можно получить из сети с маской /24.
так ну маска /24 это 254 хоста, т.е от 0-255
а в /29 8емь адресов
255+1(тип 0)/8 32 подсети получается

Приведите несколько примеров /29 подсетей внутри сети 10.10.10.0/24.
10.10.10.0-7
10.10.10.8-15
...
10.10.10.240-247
10.10.10.248-255



6)Задача: вас попросили организовать стык между 2-мя организациями. Диапазоны 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 уже заняты.
Из какой подсети допустимо взять частные IP адреса? Маску выберите из расчета максимум 40-50 хостов внутри подсети.

100.64.0.0/26

100.64.0.0-63
100.64.0.64-127
100.64.0.128-191
100.64.0.192-255

можно взять как в примере с лекции
4 подсети по 62 хоста в 4 актете


7)Как проверить ARP таблицу в Linux, Windows?

Linux
vagrant@vagrant:~$ arp -a
? (10.0.2.3) at 52:54:00:12:35:03 [ether] on eth0
_gateway (10.0.2.2) at 52:54:00:12:35:02 [ether] on eth0


Win
arp -a

Interface: 192.168.1.146 --- 0x2
  Internet Address      Physical Address      Type
  192.168.1.1           78-98-e8-d2-9c-5e     dynamic
  192.168.1.255         ff-ff-ff-ff-ff-ff     static
  224.0.0.22            01-00-5e-00-00-16     static
  224.0.0.251           01-00-5e-00-00-fb     static
  224.0.0.252           01-00-5e-00-00-fc     static
  239.255.255.250       01-00-5e-7f-ff-fa     static
  255.255.255.255       ff-ff-ff-ff-ff-ff     static

Interface: 192.168.56.1 --- 0x18
  Internet Address      Physical Address      Type
  192.168.56.255        ff-ff-ff-ff-ff-ff     static
  224.0.0.22            01-00-5e-00-00-16     static
  224.0.0.251           01-00-5e-00-00-fb     static
  224.0.0.252           01-00-5e-00-00-fc     static
  239.255.255.250       01-00-5e-7f-ff-fa     static


Как очистить ARP кеш полностью?

Linux
vagrant@vagrant:~$ sudo ip -s -s neigh flush all
vagrant@vagrant:~$ sudo ip neigh flush all

win
от админа arp -d -a



Как из ARP таблицы удалить только один нужный IP?

Linux
arp -d 192.168.100.10

win
arp -d 192.168.100.10


8)там долго но сделаю